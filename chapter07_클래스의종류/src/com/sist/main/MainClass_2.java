package com.sist.main;

import java.util.ArrayList;
import java.util.List;

/*
 *      지금까지 배웠던건 사용자 정의 일반 클래스였음
 *                   ----------------
 *                   = 데이터형 : 여러개의 변수만 모아서 한번에 저장할 목적 (""변수중심"")
 *                           : ~VO(Value Object) => Spring에서 주로 쓰임
 *                           : ~DTO(Data Transfer Object) => MyBatis(웹)에서주로쓰임
 *                           : ~Bean => JSP에서 주로쓰임
 *                           
 *                   = 액션클래스 : 데이터형 클래스를 제어해줄 목적 (""메소드중심"")
 *                             : ~DAO (Data Access Object) => 오라클연결
 *                             : ~Manager => 파일 입출력 / 크롤링 / OpenAPI(뉴스,지도)
 *                             : ~Service => DAO 여러개를 묶어서 관리
 *                                           : 보통 DAO는 한개의 동작을 저장해두기 때문에 (게시판,댓글...)
 *                                             댓글형게시판 같이 두개의 동작으로 묶기위해 Service 생성
 *                             : ~Controller => 자바에서 브라우저로 보낼때
 *                             : ~RestController => 자바에서 JSON을 이용해서 데이터형같은 문법을 변환 후 자바스크립트로 보낼때
 *       
 *      [7장:클래스의 종류]
 *      1) 추상 클래스
 *         :"단일상속"만 가능
 *         
 *         = 주목적) 
 *           관련된 클래스를 모아서 관리(서로다른 클래스를 연결해서 사용)
 *           
 *         = 미완성 클래스 : 메소드를 구현하지 않는 경우 => 선언만 한 경우
 *                     : 이 경우 new를 이용하여 메모리 할당이 불가능
 *                     : 사용시 반드시 "상속을 내려서 구현(오버라이딩)후에 사용"해야함
 *         = 선언만 한 메소드가 존재할 수 있다.
 *         = 인스턴스 메소드, 인스턴스 변수를 사용할 수 있다.(=따로저장이가능하다)
 *         
 *         = 형식)    --추상--
 *           public abstract class ClassName
 *           {
 *              -------------①-------------
 *               변수영역
 *              -------------②-------------
 *               구현된 메소드 //공통으로 사용 
 *                         //필요시 오버라이딩
 *                    public void display(){}
 *              -------------③-------------
 *               선언된 메소드 //이부분은 없을수도 있다.
 *                         //그러나 상속을 받으면 반드시 구현해야함
 *                    public abstract void display(); //{}이없음
 *                         //구현이 안되는 경우 = default값 생성이 불가능할때
 *                                         예)해당버튼이 계산기라고 치면 이 버튼이 연산자가될지..숫자가될지..
 *                                            버튼의 용도를 예측할수 없음으로 default가 불가능함
 *                                            그래서 상속받아서 때때마다 오버라이딩해라~로 구현함
 *                                         예)키보드의 버튼도 숫자키인지..방향키인지 예측불가능
 *                   //따라서 용도가 많은건 default값 생성불가 => 선언만 하는 메소드로 주로 구현
 *              ---------------------------
 *           }
 *           
 *         = 추상클래스의 클래스 상속 예제
 *           public abstract class A
 *           public class B extends A
 *           {
 *           }
 *           이런경우 A를 가져다 써야하는데 B로 구현해야함
 *           ==> A a=new B();
 *           ==> 구현된 클래스를 이용해서 메모리를 할당하는 과정임
 *           
 *         = 추상클래스는 공통성을 가지고 있는 클래스 ==> 요구사항 분석시 만들어짐        
 *           예)   게시판 : 목록출력,검색,글쓰기,내용보기,수정하기,삭제하기
 *              묻고답하기 : 목록출력,검색,글쓰기,내용보기,수정하기,삭제하기,답변하기
 *              댓글게시판 : 목록출력,검색,글쓰기,내용보기,수정하기,삭제하기,댓글작성
 *              후기게시판 : 목록출력,검색,글쓰기,내용보기,수정하기,삭제하기,업로드
 *              ===>모두 기능은 비슷한데 각 게시판의 출력화면(=UI)은 다름
 *              ===>이걸 해결하기위해 
 *                  ① 공통으로 사용되는 메소드를 찾는다 => 예시에서는 최상단의 게시판 부분을 찾으면됨
 *                  ② 공통 메소드를 추상메소드 (구현안된 메소드)로 변환한다
 *                  ③ 상속받아서 구현(오버라이딩)하면됨 => 프로그램에 맞게(=각게시판에맞게) 구현하라는뜻
 *                  ④ 추후 추상클래스로 모든 게시판 제어
 *                  ===> 클래스를 묶어서 한개의 이름으로 제어가능!
 *                  ===> 이걸 기반으로 추후 서버 설계때 반대로 가이드라인으로 참고할수도 있음
 *                  
*         = 추상클래스인지 아닌지 확인하는법
*           1) 추상클래스와 생성자가 다른경우 : 추상클래스!
*              왜냐면 같은 경우는 일반클래스였음!!!
*              예) List names=new ArrayList(); 이거는 다르니까 추상클래스 아님 인터페이스란뜻임
*              
*           2) 메모리 할당을 하는데 메소드를 이용한다? : 추상클래스! 
 *               
 *      2) 인터페이스 => 추상클래스의 일종
 *         :인터페이스도 클래스임 그러나 다른점은 "다중상속"이 가능하단점
 *         
 *      3) 내부 클래스
 */
public class MainClass_2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
