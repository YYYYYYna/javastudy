package com.sist.main;
/*
 *       대표적인언어종류 : 자바 , 파이썬 , c/c++ , 코틀린 , 스칼라 , c#...
 *       
 *       마크업랭귀지 : HTML/XML(웹), WML/HDML(모바일), VML(음성)
 *       
 *       javaScript : JQuery(AJax) , Vue,React , TypeScript , coffieScript , NodeJs , NextJs
 *       
 *       사용기술 : Spring , Spring-Boot
 *       
 *       구조(아키텍쳐) : AWS , MSA
 *       
 *       데이터분석관련 : 아나콘다(R , NumPy , Pandas) , MatPlotLib
 *       
 *       머신러닝/딥러닝관련 : 
 *       
 *       --------------------------------------------------------------------------------------
 *       IT의 공부하는 방식 => 모른다고 고여있는게 아닌 전진해야함 (모르는부분은 부분만따로공부) => 나중에도 신기술쪽으로도 계속
 *       ===============> 실무는 구현이 중심이기 때문...이론은 면접에서만봄... 그럼 외울거면 실행문 위주로 하는게 좋을듯?
 *                        그니까 아 이런부분에서 인터페이스를 사용하는구나~ 식으로 완성되어야함
 *       --------------------------------------------------------------------------------------
 *      [자바정리...]
 *      
 *       = 데이터형 => 변수(2장)
 *         : 정수(byte,int,long)...
 *              -----     ----
 *              |파일입출력에서  |데이터분석(빅데이터)
 *              |쓰임 (io)
 *         : 실수(double)
 *         : 논리(boolean)
 *         : 문자보단 문자열(String)이 더 많이나옴
 *         
 *       = 처리하는방법 => 연산자/제어문(3.4장)
 *         : 단항연산자 :증가연산자(++,--), 부정연산자(!), 형변환연산자(type)
 *                   :자동형변환과 강제형변환
 *                   :*클래스도 형변환이 가능함(상속/포함필수) => instanceOf로 클래스크기비교를함
 *         : 이항연산자 :산술연산자, 비교연산자(==,!=,<=,>=,<,>), 논리연산자(&&,||), 대입연산자(=,+=,-=)
 *         : 삼항연산자 :?:
 *         : 제어문 :조건문(if단일,if-else선택,if-else if-else다중), 반복문(for:화면출력,while:데이터베이스/파일관리), 반복제어문(break)
 *           
 *       = 배열 => 1차원정도면충분
 *            : 클래스 / 배열 ==배열단점보완=> (12장)컬렉션
 *       
 *       = 클래스 (5.6.7장)
 *     5장:구성요소
 *         -----
 *         ⓐ멤버변수
 *          => 인스턴스 변수 ==> 메모리를 new로 따로 저장
 *          => 정적(static) 변수 ==> 메모리 공간을 한개만 이용
 *             --------------
 *               => 디자인패턴 : 싱글턴 패턴 => 데이터베이스 연동
 *               => 팩토리패턴 
 *               => 스프링에서 유용하려면 컴바인드 패턴(8개)를 다 알고있음 좋음
 *                  그외 나머지는 인스턴스 변수에서 쓰임
 *          : 데이터 보호 => 캡슐화 => private => getter/setter
 *          
 *         ⓑ메소드
 *          : 다른 클래스와 연결
 *          => 인스턴스 메소드 ==> 메모리에 따로 저장
 *             호출시> 객체명.메소드()
 *          => 정적(static) 메소드 ==> 공유(한개의 메소드로 모든객체가 사용)
 *             호출시> 클래스명.메소드()
 *          : 접근지정어:public
 *          : 리턴형 :기본형(결과값1개) , 클래스형,배열(목록,상세보기,검색결과):리턴형은1개묶음으로넘어가는거잊지말기
 *          : 메소드명 :식별자(소문자로시작)
 *          : 매개변수 :사용자요청값 / 여러개 사용가능,3개이상부턴 배열,클래스
 *         
 *         ⓒ생성자
 *          : 시작과 동시에 실행해야할때
 *          : 멤벼변수 초기화, 메모리할당시 호출되는 함수
 *          : 클래스는 무조건 생성자 한개를 가지고 있음
 *            => 없는경우? 자동으로 1개추가 (디폴트 생성자)
 *            
 *        ====> 클래스에서 자동으로 추가되는부분
 *             1) import 자동 추가
 *                import java.lang.*
 *                       --------- String , Math , Object , System
 *             2) 모든 클래스(라이브러리,사용자정의클래스)
 *                => 상속 (Object)
 *                class MainClass (extends Object)
 *             3) 모든 메소드는 return(메소드 종료)
 *                => void일 경우에는 자동으로 return이 추가
 *             4) class A
 *                {
 *                   public A(){} ==> 안보이지만 아무기능없는생성자가 자동추가되어있음
 *                }
 *             5) 자바에서 지원하는 모든 클래스는 예외처리를 가지고 있다.
 *                CheckException(=예외처리필수) / UnCheckException(=예외처리생략)
 *                -------------------------
 *                | 네트워크 : URL , Sorket...
 *                | IO : 파일 입출력
 *                | SQL : 오라클 연결 
 *                
 *        ====> 클래스에서 생성자를 이용하지 않고 초기화 방법
 *              : 초기화 블록
 *                 = 인스턴스 블록 => 생성자
 *                 = static 블록 => static 변수 => 생성자를 호출하지 않아도됨
 *              : 중요한건 명시적 초기화가 가능한지 확인하고 불가능하면 생성자나 초기화블록을 이용하는것이다
 *                                              ----
 *                                              = 외부에서 값을 읽어서 초기화
 *                                              = 크롤링,파일,네트워크...
 *          
 *     6장:객체지향 3대특성(=권장사항)
 *        1) 캡슐화 : 데이터 보호
 *           => 변수를 은닉화 : private
 *           => 기능(메소드)설정 : getter/setter(=>Lombok을 이용해서 간편하게 사용가능)
 *        2) 재사용기법
 *           상속) 기존의 클래스를 확장 , 필요시 수정(오버라이딩)
 *                class A
 *                class B extends A
 *           포함) 기존의 클래스를 그대로 사용
 *                class A
 *                class B
 *                {
 *                   A a=new A(); => 강제변경필요시? 익명의클래스로 상속없이변경가능
 *                } 
 *             상속의 예외조건) static , 생성자, 초기화블록, private(상속O접근X)
 *             상속의 형변환) 상속시 클래스의 크기비교가능 => 형변환 가능으로 이어짐
 *                        예)class B extends A ==> A>B
 *                          자동형변환(묵시적형변환)
 *                           A a=new A();
 *                           B b=new B();
 *                           A a=b;
 *                          강제형변환(명시적형변환):큰걸작은걸로받을때
 *                           A a=new B();
 *                           B b=(B)a;
 *                           ---------해당형태는 추후 라이브러리에서 클래스를 리턴할때
 *                                    Object형으로 리턴하는 경우가 많기 때문에 꼭 기억해야함
 *                        
 *        3) 다형성(변경/추가)
 *           변경 : 오버라이딩
 *           추가 : 오버로딩
 *           
 *        메소드 관련으로 정리한      오버로딩         오버라이딩 
 *        ---------------------------------------------
 *         상태                같은 클래스     상속을 받은 경우
 *        ---------------------------------------------
 *         리턴형                관계 없다          동일
 *        ---------------------------------------------
 *         메소드명               동일             동일
 *        ---------------------------------------------
 *         매개변수         갯수나 데이터형이 다르나     동일
 *        ---------------------------------------------
 *         접근지정어             관계없다         축소X 확대O
 *        ---------------------------------------------
 *                                           : private < default < protected < public
 *                                             [해당부분 인터페이스 관련 예제 사진찍어둠]
 *       
 */
import java.util.*;
public class MainClass {

	public static void main(String[] args) {

		//컬렉션으로 Object 형변환 예제
		List names=new ArrayList();
		
		names.add("홍길동"); //names의 0번에 들어감
		String name=(String)names.get(0); //names.get(0)은 현재 Object형임으로 형변환 시켜줘야함
		

	}

}
