package com.sist.main;
/*
 *       대표적인언어종류 : 자바 , 파이썬 , c/c++ , 코틀린 , 스칼라 , c#...
 *       
 *       마크업랭귀지 : HTML/XML(웹), WML/HDML(모바일), VML(음성)
 *       
 *       javaScript : JQuery(AJax) , Vue,React , TypeScript , coffieScript , NodeJs , NextJs
 *       
 *       사용기술 : Spring , Spring-Boot
 *       
 *       구조(아키텍쳐) : AWS , MSA
 *       
 *       데이터분석관련 : 아나콘다(R , NumPy , Pandas) , MatPlotLib
 *       
 *       머신러닝/딥러닝관련 : 
 *       
 *       --------------------------------------------------------------------------------------
 *       IT의 공부하는 방식 => 모른다고 고여있는게 아닌 전진해야함 (모르는부분은 부분만따로공부) => 나중에도 신기술쪽으로도 계속
 *       ===============> 실무는 구현이 중심이기 때문...이론은 면접에서만봄... 그럼 외울거면 실행문 위주로 하는게 좋을듯?
 *                        그니까 아 이런부분에서 인터페이스를 사용하는구나~ 식으로 완성되어야함
 *       --------------------------------------------------------------------------------------
 *      [자바정리...]
 *      
 *       = 데이터형 => 변수(2장)
 *         : 정수(byte,int,long)...
 *              -----     ----
 *              |파일입출력에서  |데이터분석(빅데이터)
 *              |쓰임 (io)
 *         : 실수(double)
 *         : 논리(boolean)
 *         : 문자보단 문자열(String)이 더 많이나옴
 *         
 *       = 처리하는방법 => 연산자/제어문(3.4장)
 *         : 단항연산자 :증가연산자(++,--), 부정연산자(!), 형변환연산자(type)
 *                   :자동형변환과 강제형변환
 *                   :*클래스도 형변환이 가능함(상속/포함필수) => instanceOf로 클래스크기비교를함
 *         : 이항연산자 :산술연산자, 비교연산자(==,!=,<=,>=,<,>), 논리연산자(&&,||), 대입연산자(=,+=,-=)
 *         : 삼항연산자 :?:
 *         : 제어문 :조건문(if단일,if-else선택,if-else if-else다중), 반복문(for:화면출력,while:데이터베이스/파일관리), 반복제어문(break)
 *           
 *       = 배열 => 1차원정도면충분
 *            : 클래스 / 배열 ==배열단점보완=> (12장)컬렉션
 *       
 *       = 클래스 (5.6.7장)
 *         구성요소
 *         -----
 *         ⓐ멤버변수
 *          => 인스턴스 변수 ==> 메모리를 new로 따로 저장
 *          => 정적(static) 변수 ==> 메모리 공간을 한개만 이용
 *             --------------
 *               => 디자인패턴 : 싱글턴 패턴 => 데이터베이스 연동
 *               => 팩토리패턴 
 *               => 스프링에서 유용하려면 컴바인드 패턴(8개)를 다 알고있음 좋음
 *                  그외 나머지는 인스턴스 변수에서 쓰임
 *          : 데이터 보호 => 캡슐화 => private => getter/setter
 *          
 *         ⓑ메소드
 *          : 다른 클래스와 연결
 *          => 인스턴스 메소드 ==> 메모리에 따로 저장
 *             호출시> 객체명.메소드()
 *          => 정적(static) 메소드 ==> 공유(한개의 메소드로 모든객체가 사용)
 *             호출시> 클래스명.메소드()
 *          : 접근지정어:public
 *          : 리턴형 :기본형(결과값1개) , 클래스형,배열(목록,상세보기,검색결과):리턴형은1개묶음으로넘어가는거잊지말기
 *          : 메소드명 :식별자(소문자로시작)
 *          : 매개변수 :사용자요청값 / 여러개 사용가능,3개이상부턴 배열,클래스
 *         
 *         ⓒ생성자
 *          
 */
public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
