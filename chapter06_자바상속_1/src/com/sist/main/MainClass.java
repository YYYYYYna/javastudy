package com.sist.main;
/*
 *     기본문법(8장)  => 9장 : 조립식(라이브러리 이용)
 *     
 *     **객체 지향의 3대 특성
 *       "캡슐화" / 상속,"포함" / 오버라이딩,오버로딩(다형성)
 *       => 자바에서 필수는 아니나 권장사항
 *       => 그러나 캡슐화와 포함은 매우중요
 *       => 상속은 클래스 상속보다는 "인터페이스 상속"이 더 많이 중요
 *     
 *     1. 객체지향 프로그램
 *        1) 데이터 보호 : 캡슐화
 *           => 데이터를 은닉화 => 메소드를 통해서 접근
 *              ----------    --------------
 *              =private      =getter/setter(읽기/쓰기)
 *              
 *        2) 재사용 기법
 *           = 반복제거
 *           = 상속(is-a) / 포함(has-a) => 클래스 크기 비교
 *           = 이미 사용중에 있다 (신뢰성)
 *           => 재사용을 한다는 뜻은 (상속,포함) ,가독성(메소드) , 견고성(예외처리)
 *           => 프로그램 (네트워크,데이터베이스)
 *           
 *        3) 자바의 상속(194pg~)
 *           = 재사용 목적으로 사용 (기존의 만들어진 클래스를 확장해서 사용)
 *             -------------=상속(재사용,기능변경해서사용)
 *                           --------------------
 *                                     |라이브러리를 상속해서 처리
 *                                     
 *           ===> 우선 ①②둘다 반복코딩을 제거할수 있다는 장점   
 *                예) 
 *                  윈도우 => 변경 / 있는그대로 두가지가 있음
 *                  ①                     ↓상속
 *                  public class Login extends JFrame 
 *                  ②
 *                  public class Login
 *                  {
 *                    JFrame fr=new JFrame(); ←포함
 *                  }       
 *                                  
 *           = ① 필요시에는 변경해서 사용 = [상속] : 기존에 만들어진 클래스를 확장(extends)해서 새로운 클래스를 만들어 사용
 *                                          예) class 게시판
 *                                             {
 *                                                글쓰기
 *                                                목록 출력
 *                                                상세보기
 *                                                수정
 *                                                삭제
 *                                                검색
 *                                             }
 *                                             //위의 기능 확장시키기
 *                                             class 갤러리게시판 extends 게시판
 *                                             {              ------------
 *                                                ==>이자리에 위의 게시판 내용이 그대로 들어옴 그러나 눈에는 안보이고 메모리상으로만!
 *                                                
 *                                                글쓰기 ===차후 필요한 부분만 "수정" 가능==> 이미지업로드
 *                                                목록 출력 ===차후 필요한 부분만 "수정" 가능==> 이미지출력
 *                                                상세보기
 *                                                수정
 *                                                삭제
 *                                                검색
 *                                             }
 *                                             class 답변형게시판 extends 게시판
 *                                             {
 *                                                ==>이자리에 위의 게시판 내용이 그대로 들어옴 그러나 눈에는 안보이고 메모리상으로만!
 *                                                
 *                                                글쓰기
 *                                                목록 출력
 *                                                상세보기
 *                                                수정
 *                                                삭제
 *                                                검색
 *                                                ===차후 필요한 부분만 "추가" 가능==> 추가답변
 *                                             }
 *                                             //활용예시
 *                                             ⓐ
 *                                             class 동물
 *                                             class 인간 extends 동물
 *                                             ----- 데이터형(사용자정의)
 *                                                     |인간, 동물 데이터형 둘다 포함
 *                                                     동물 a=new 인간()
 *                                                     인간 b=new 인간()
 *                                                     ==> 인간은 동물도 인간도 될수 있다
 *                                             ⓑ
 *                                             Music
 *                                             지니 ===상속===> 멜론
 *                                             영화
 *                                             CGV ===상속===> 롯데시네마/메가박스
 *                                             //상속을 받는경우 ==> 다형성
 *                                             변경 = 오버라이딩
 *                                             다른추가 = 오버로딩
 *                                             
 *          [상속]특징) + 한개만 상속이 가능 (단일상속) 
 *                     (두개에서 한번에 "상속받기"는 불가능 / 하나에서 여러개 "상속하기"는 가능)
 *                     (여러개에서 한개에 상속을 해야한다면 도미노처럼 하나씩 연결하는 방법 이용해야함)
 *                     
 *                   + 자바의 모든 클래스는 라이브러리/사용자정의클래스
 *                     모든 클래스는 object클래스로 부터 상속을 받는다
 *                     예)class A (extends Object)=지금까지는 이부분이 생략됨) [==>^0^캡쳐설명본만듬]
 *                     
 *                   + 서로 다른 클래스 여러개를 모아서 관리 가능 (=한개의 이름으로 제어할때 가장 좋은 프로그램)
 *                     =>int a~z => 26개 보다 int[] alpha 로 사용하는것이 더 좋은 원리
 *                     =>다른데이터형을 모은걸 클래스 명령문을 모은걸 메소드 클래스를 모은걸 상속
 *                     이렇게 최대한 한개로 만들어야 제어하기가 쉬움! => 최소한의 메모리 생성으로 제어가 쉬워짐
 *                     
 *          [상속]형식) A extends B => B가 가지고 있는 모든 것을 가지고 온다.(=확장)
 *                   =         =    (B가 가진 것 => 멤버변수,공유변수,메소드,생성자,초기화블록)
 *                  하위클래스    상위클래스            -----        ----
 *                                                  | 이2개만상속함 | 
 *                                                  => 따라서 보통 필요한 기능(=메소드) 을 설정한다고보면됨
 *                                                  => 멤버변수를 사용하려면 private를 protected로 바꿔야함
 *                                                   
 *                  상속을 내리는 클래스 : 슈퍼클래스 , 상위클래스 , 베이스클래스 , 부모클래스
 *                  상속을 받 는 클래스 : 서브클래스 , 하위클래스 , 파생클래스 , 자식클래스
 *               
 *          [상속]예외조건) 1.생성자
 *                      2.초기화블록
 *                      3.static => 상속이 아니라 공유 할 수 있다.
 *                      4.멤버변수 => 상속은 된다 , 접근이 불가능(멤버변수를 사용하려면 private를 protected로 바꿔야함)
 *                      
 *               오버라이딩) 상속이 있어야 사용 가능함
 *                        메소드의 기능을 "변경"하여 사용
 *                        그러나 속도(최적화)를 위해 가급적이면 상속해서 사용하지 않음!
 *                        예) class A
 *                           class B extends A
 *                           
 *                           B b=new B(); ==> A클래스 메모리 할당 => B클래스 메모리 할당
 *                           => 스프링에서는 상속 개념이 거의 없다
 *                              일반클래스로 사용 => 처리
 *                              ---=POJO---
 *                       
 *                   
 *              
 *           = ② 있는 그대로 사용 = 포함
 *             
 *             
 */
//상속의 예제
class Super
{
	int a,b;
	void display() {}
}
class Sub extends Super
{
	//눈에는 안보이지만 아래에는 상속받은 내용이 존재함
	//int a,b;
	//void display() {}
	public void aaa()
	{
		System.out.println("a="+a);//상속받아서
		System.out.println("b="+b);//따로정의없이도 값사용가능
		display(); //메소드 사용도 가능!!!
	}
}
public class MainClass {

	public static void main(String[] args) {
		

	}

}
