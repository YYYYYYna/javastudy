/*
 *    **변수는 1개만 저장하는 공간
 *      --- 많은 경우에 변수를 제어하기 어렵다.
 *      --- 보완 : 한개의 이름으로 여러개의 변수를 제어
 *                --------
 *                = 배열명=>인덱스번호로 제어
 *    1. 배열 : 여러개의 변수를 하나로 묶어서 관리하는 역할을 수행
 *             1차원배열 / 2차원배열 ... 다차원배열, 가변배열
 *             -------웹에서는 1차원 배열만 사용 (그외는클래스가더중요)
 *           : 장점 => 한개의 변수명으로 모아서 관리하기 때문에 반복문 사용이 쉽다.
 *                 => 연속적인 메모리 구조 => 인덱스번호를 이용한다.
 *           : 단점 => 고정적이다 => 한번 메모리 할당을 하면 변경하기 어렵다.
 *                            변경필요시 기존의 배열보다 크게 배열 만들어 처리
 *                 => 보완 : 컬렉션 (가변형)*****매우중요
 *                          -----------
 *                          웹 1) 기본문법
 *                             2) 클래스 설계
 *                             3) 데이터베이스연동
 *                             4) Front
 *                          이러한요소들은 배열보다 컬렉션으로 해결을 해야 수월하다.
 *                 => 같은 데이터형만 모아서 관리
 *           : 사용법
 *           1) 선언
 *              데이터형[] 배열명;
 *              데이터형 배열명[];
 *           2) 초기값
 *              = 생성동시에 초기화
 *                int[] arr={1,2,3,4,5}
 *                          ----------- 배열갯수5개생성
 *              = 자동초기화
 *                int[] arr=new int[5];
 *                ---------------------new사용시 아래처럼 초기화됨
 *                int => 0
 *                double => 0.0
 *                float => 0.0f
 *                long => 01
 *                boolean => false
 *                char => '\u0000' -> null문자 -> '\0'
 *                String => null
 *                          ----주소가 없는 경우
 *                          NullPointException -> 주소배정이안된오류
 *              메모리 주소 
 *              int[] arr={1,2,3,4,5};
 *              ---------1번생성
 *              참조변수는 뒤의 배열을 위한 주소/번지수 정도의 개념이라생각하면됨
 *              뒤에 배정되는 배열은 가구원의 개념 
 *              따라서 둘의 저장되는 메모리 위치는 Stack과 Heap으로 서로 다르다
 *              
 *              [Stack] : 주소      [Heap] : 실제데이터저장
 *               arr                
 *              -----               ---------------------------------
 *              0x100     ==>          1     2     3     4     5
 *              -----               |-----|-----|-----|-----|----------
 *                                0x100 0x104 0x108 ...
 *                                  arr[0] arr[1] arr[2] ...
 *                                연속적인 메모리의 시작주소
 *                                arr[index]
 *                                --- -----> 연속적으로 배치(몇번째)
 *                               배열명
 *                               
 *                               * 인덱스번호는 0번부터 시작
 *                               * 순차적으로 되어 있다.
 *                               * 배열의 인덱스 추가, 삭제 => 불가능. 새로운배열 만들어야함
 *                               * 주의점 : 인덱스 초과시 에러발생
 *                                 int[] arr=new int[5]
 *                                 arr[5]=오류 0~4까지의 인덱스만 존재
 *                               * 갯수 => length를 사용하는것이 좋다.
 *              => 각 데이터형별 생성
 *                 int[] arr
 *                 double[] arr
 *                 char[] arr
 *                 boolean[] arr
 *                 Strint[] arr
 *              => 배열 => 변수
 *                 ----------
 *                 변수) 읽기, 저장, 수정
 *                           --------
 *                        ex. int a=10;(=a공간에 10저장)
 *                            a=20;(=a공간 수정)
 *                 배열) 읽기, 저장, 수정
 *                       ex. int[] arr=new int[10];(=a배열에 10칸할당)
 *                           arr[index번호]=10;(=a공간 수정)
 *                       ex. System.out.println(arr[0]); //값출력
 *                           System.out.println(arr); //메모리주소출력
 *           3) 활용 => 인덱스 0~
 *              = 보통 범위가 정해져 있기 때문에 for문을 많이 사용
 *                값을 변경, 수정 => 일반for문
 *                : int[] arr=new int[5];
 *                  for(int i=0;i<arr.length;i++)
 *                  {     ---------인덱스번호
 *                        arr[i]=i;
 *                  }
 *                값을 출력 => for-each문 -> 코드가 간결하고 처리속도가 빠르다는 장점.
 *                : int[] arr=new int[5];
 *                  for(int i:arr)
 *                  {   ------인덱스번호가 아니라 실제 저장된 값
 *                  }
 *        => 변수 (데이터 저장 공간)
 *           = 변수
 *           = 배열 -구조체없음
 *           = 클래스
 */
public class 배열_1 {

	public static void main(String[] args) {
		//정수 5개 저장하는 배열
		//1. 생성과 동시에 값도 들어가는 배열
		int[] arr= {10,20,30,40,50};
		arr[0]=100;
		arr[3]=300;
		//출력
		System.out.println("=== 일반for문 ===");
	    long s=System.currentTimeMillis();
	    for(int i=0;i<arr.length;i++)
	    {
	    	System.out.println(arr[i]);
	    }
	    long e=System.currentTimeMillis();//해당코드실행까지 걸린시간
	    System.out.println("걸린 시간:"+(e-s)); //구간을 구하려면 마지막-처음
	    
	    System.out.println("=== for-each문 ===");
	    int[] brr=new int[1000];
	    s=System.currentTimeMillis();
	    for(int i:brr)
	    {
	    	System.out.print(brr[i]);
	    }
	    e=System.currentTimeMillis();//해당코드실행까지 걸린시간
	    System.out.println("\n걸린 시간:"+(e-s)); //구간을 구하려면 마지막-처음
	    

	}

}
