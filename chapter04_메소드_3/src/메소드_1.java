/*
 *         = 매개변수 : 사용자가 요청한 값
 *                   웹에서 : 마우스 클릭 , 엔터 , 버튼 , 입력창
 *                         ---------              ----
 *                   => 메소드는 사용자가 행위를 한 경우 => 메소드 호출
 *                             -------- : 마우스 , 키보드
 *                             
 *         = 메소드명 : 식별자 (변수)
 *                   => 소문자로 시작한다...
 *                   
 *         = return문장 : 처리 결과값을 보내준다. 메소드의 종료점
 *           --------- 맨마지막에 사용하는 것이 아니라 중간에 사용이 가능
 *           method()
 *           {
 *              if()
 *              {
 *                return; <=이때 혹은
 *              }
 *              else
 *              {
 *                return; <=이때도 종료 가능
 *              }
 *           }
 *         
 *      2. 메소드 형식 
 *         --------------[접근지정어]---------------
 *         public : 모든클래스에서 사용가능
 *         protected : 상속받는 클래스, 같은 폴더 안에서
 *         default : 같은 폴더 안에서만
 *         private : 자신의 클래스(=캡슐화) => 은닉화
 *         
 *         ----------------[옵션]-----------------
 *         static : 자동 메모리 저장 ==> new
 *         abstract : 추상 메소드 ==> 선언만 할때(설계=>요구사항)
 *         final : 수정이 불가능 ==> String, Math...
 *         
 *         ----------------[리턴형]-----------------
 *         리턴형(1개)으로 사용 => 기본형(int long byte char double boolean)
 *                            ----               ------ -------- 가장많이쓰임
 *                    => 참조형 : 배열 / 클래스
 *                       String , int[]
 *                    => 메소드 매개변수 전송법
 *                       ---------------
 *                       **Call By Value(값만 전송하는지)
 *                       **Call By Reference(주소값도 전송하는지)
 *        
 *        ----------------[매개변수]-----------------
 *         매개변수(0개이상)으로 사용 => 기본형 : Call By Value
 *                                참조형 : Call By Reference
 *                                ***매개변수가 3개 이상이면 배열,클래스 사용함!
 *        
 *        [접근지정어][옵션] 리턴형 메소드명(매개변수...) ==> 선언부
 *        {
 *           구현부
 *           ===> 변수선언
 *           ===> 연산자
 *           ===> 제어문
 *           -----------마지막엔 결과값을 도출해 줘야함(파이썬:예측)
 *           return 결과값;
 *           => 자체처리 => void => return을 생략할 수 있다.
 *                               ------------
 *                                   |모든 메소드는 return을 필요로 한다
 *                                   |컴파일러가 자동 추가                 
 *        }
 *        => return / import java.lang.* : 자동추가
 *                           ---------- String, Math, System.
 *           return을 생략할때는 void인 경우에만 가능
 *           
 *        ***모든 프로그램
 *        = 입력 기능 => 변수에 대한 초기화
 *        = 처리 부분(요청) => CRUD : Create(추가) => INSERT
 *                              : Read(읽기/목록,상세보기) => SELECT
 *                              : Update(수정) => UPDATE
 *                              : Delete(삭제) => DELETE
 *                        
 *        = 출력 => 사용자가 볼수 있게 만든다. => HTML,CSS
 *        = main() => 프로그램의 시작과 종료
 *        
 *     3. 메소드 유형
 *        리턴형  매개변수
 *         O      O
 *         O      X
 *         X      O
 *         X      X
 *         
 */
public class 메소드_1 {

	public static void main(String[] args) {
		

	}

}
