/*
 *     [배열에서 각 분야별로 가장 많이 쓰이는 부분]
 *     
 *     1. 변수, 배열 => int, String
 *                   -----------많이나옴 매우중요
 *     2. 요청 처리 => 연산자,제어문 (메소드화)
 *                  ----------
 *        연산자 : 산술연산자(+,%)
 *               비교연산자, 논리연산자, 대입연산자(+=)
 *        제어문 : if, if~else
 *               for문 , 향상된for문(for~each문)=>출력
 *                      ------------------------웹, JavaScript에서 많이 쓰임으로 중요
 *                                                      |
 *                                                    라이브러리(forEach, map)
 *                                                    => VueJs,React,Redux
 *               while문=>데이터베이스 연동(오라클에서 데이터 읽기)
 *    ----------------------------------- 기본과정 -----------------------------------
 *     3. 분리 작업 => 관련된 내용을 묶어서 사용
 *        ------
 *         ① 데이터 묶어서 사용
 *          = 배열
 *          = 클래스
 *         ② 명령문 묶어서 사용 => 입력 / 처리 / 출력 => 메소드
 *           --------------------------------------- 이모든걸 묶으면 =객체지향 프로그램
 *                                                               : 재사용, 수정, 기능추가, 데이터노출방지
 *                                                                 ----  ----------   ------- 캡슐화
 *                                                                   |    다형성(오버라이딩,오버로딩)
 *                                                                 ⒜ 변경해서 사용 => 상속(is-a)
 *                                                                 ⒝ 있는그대로 사용 => 포함(has-a)
 *    -----------------------------------------------------------------------------------------
 *     1. 설계 => 인터페이스
 *     2. 비정상 종료를 방지 (오류를 사전에 처리) => 예외처리
 *     3. 라이브러리 => 조립식 프로그램
 *        ------네트워크, 데이터베이스 연동
 *    -----------------------------------------------------------------------------------------
 *     메소드 잊어버리면 자바 그만둘 생각으로 열심히 외우셈...
 *     
 *     배열
 *     --데이터묶기
 *     => 연속적으로 메모리 할당 => 인덱스 이용
 *     => ----이기 때문에 메모리 크기가 동일해야함
 *     =>              -------해야하기 때문에 데이터형이 동일
 *     => 고정적이다. (크기를 선언하면 => 수정이 어렵다.)
 *                                ---만약 수정을 해야한다면? => 큰 배열을 다시 만들어서 사용
 *     ======> 배열의 해당 단점을 보완한것이 : 컬렉션(매우중요) 
 *     
 *     배열사용법
 *     1. 배열선언
 *        데이터형[] 배열명;
 *     2. 초기값 부여
 *        ① 명시적 초기화 => int[] arr={1,2,3};
 *        ----------- =int,char
 *        ② 크롤링 초기화
 *        ③ 파일
 *        ----------- =String
 *        ④ 입력 => int[] arr=new int[3];
 *                arr[0]=scan.nextInt;
 *                :
 *        ⑤ 난수발생 => int[] arr=new int[3];
 *                   arr[0]=(int)(Math.random()*100);
 *                   :
 *        ----------- =int,char
 *                    = 형식과 순서 익히기 위해 주로사용
 *                    = 저장된 데이터가 많은경우 => for문으로 index 이용
 *     3. 필요시에 수정
 *        arr[0] => 일반변수와 동일
 *        arr[0]=100 => arr[0]=1000... 가능함
 *        => 배열 : 변수명이 동일 => 인덱스번호 이용
 *                              ------
 *                         순차적임으로 for문사용시 용이
 *     4. 출력 => 검색
 *        ---
 *        향상된 for문 => 간결하다, 속도가 빠르다
 *        for(데이터형 변수명:배열,컬렉션)
 *        {   -----      --------꼭 이렇게 데이터가 묶여있어야함
 *              |배열에 저장된 데이터형과 일치하거나 보다큰걸 가져와야함
 *             
 *          => 인덱스값 사용이 아닌 실제 데이터값을 1개씩 읽어옴
 *          
 *          
 *        }
 *     
 *     5. 배열의 갯수 : 배열명.length
 *                   ---------- 갯수 : 1번부터 시작함!! 인덱스터럼 0부터 n-1아님!!
 *     
 *     6. 출력시에 => 항상 0번부터 출력하는 것은 아님
 *                 필요시 length-1부터 출력도 가능(거꾸로출력)
 *     
 *     7. 배열의 범위를 초과하면 => ArrayIndexOutofBoundsException 오류가 남 => 배열의 첨자 수정해야함
 *        [1]
 *        ---인덱스 혹은 첨자로 불림
 *     
 *     8. 자동초기화
 *        -------new 이용하면 메모리 할당시에 자동 초기화
 *        int => 0
 *        double => 0.0
 *        boolean => false
 *        char => '\u0000'=null값
 *        모든 클래스는 null값 초기화 (107page)
 *          ex) String s; => null
 *        int[] arr; ==> arr=null => 참조 변수
 *     
 *     9. 메모리 할당
 *        int[] arr=new int[3];
 *         arr        실제 저장되는위치(Heap)
 *        -----       --------------------
 *         100           0      0      0
 *        -----       |-------------------
 *                   100
 *                    arr[0] arr[1] arr[2] => 무조건 순차적으로 생성
 *                    
 *       해당방식(고정형)의 단점 : int[] arr=new int[100]; 인데 10개만 사용하면 90개의 낭비발생
 *       => 가변형은 이러한 부분을 보완하여 100개선언해도 10개만 사용하면 10개만 생성됨
 */

//만년달력만들기
//틀리게 나옴 비교해서 문제 알아내기
import java.util.Scanner;

public class 배열_1 {

	public static void main(String[] args) {
		//나중에 기능별로 처리할 수 있도록 메소드를 생성할 수 있음
		//기능1) 변수선언 => year, month => 입력
		int year,month;
		Scanner scan=new Scanner(System.in);
		System.out.println("년도를 입력 : ");
		year=scan.nextInt();
		System.out.println("월을 입력 : ");
		month=scan.nextInt();
		//기능2) 처리 => 달력을 만들기 위한 처리 => 처리부분은 메소드가 더 많아질수도 있음
		//=> 1년 1월 1일 ~ 요청날짜 사이의 총 날수를 구한후=> 총날수%7 => 요일구하기 가능
		//=> 이번경우에는 해당달의 1일자 요일을 확인해야함 => 그래야 달력생성가능
		//기능2-1) 전년도까지의 합
		int total=(year-1)*365
				 +(year-1)/4 //윤년조건
				 -(year-1)/100//윤년조건
				 +(year-1)/400;//윤년조건
		//기능2-2) 전달까지의 합
		int[] lastday= {
				31,28,31,30,31,30,31,31,30,31,30,31//각달의맨마지막날
		};
		//문제발생=> 요청한 년도가 윤년인지 아닌지도 확인해야함 
		//윤년 => 29, 윤년X => 28
		if((year%4==0 && year%100!=0)||(year%400==0))//윤년확인공식꼭외우기
		{
			lastday[1]=29;
		}
		else
		{
			lastday[1]=28;
		}
		//드디어 전달까지의 합
		for(int i=0;i<month-1;i++)
		{
			total+=lastday[i];
		}
		//기능2-3) +1
		total++; //1일자의합
		//기능2-4) 요일구하기
		int week=total%7;
		char[] strWeek= {'일','월','화','수','목','금','토'};
		//기능3) 달력 출력
		//기능3-1) 달력 요일 출력
		System.out.println(year+"년도 "+month+"월 ");
		System.out.println();
		for(int i=0;i<strWeek.length;i++)
		{
			System.out.print(strWeek[i]+"\t");
		}
		System.out.println();
		//기능3-2) 달력 날짜 출력
		for(int i=1;i<=lastday[month-1];i++)
		{
			if(i==1)//1일이 일요일이 아닐경우 앞에 공백을 줘야함
			{
				for(int k=0;k<week;k++)
				{
					System.out.print("\t");
				}
			}
			System.out.printf("%2d\t",i);
			week++;
			if(week>6)
			{
				week=0;
				System.out.println();
			}
		}

	}

}
